/// @author Mykola Konyk <mykola@konyk.org>
///
/// @copyright 2015
/// @license MS-RL
/// This file is autogenerated from util/hapi_enums_nif.h.template

#pragma once

#if !defined(HAPI_ENUMS_NIF_H)
#define HAPI_ENUMS_NIF_H

#include "erl_nif.h"
#include "HAPI.h"


/* Defined in enums/hapi_ramptype_nif.c */
ERL_NIF_TERM hapi_make_hapi_ramptype(ErlNifEnv* env, HAPI_RampType enum_value);
bool hapi_get_hapi_ramptype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_RampType* enum_result);

/* Defined in enums/hapi_xyzorder_nif.c */
ERL_NIF_TERM hapi_make_hapi_xyzorder(ErlNifEnv* env, HAPI_XYZOrder enum_value);
bool hapi_get_hapi_xyzorder(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_XYZOrder* enum_result);

/* Defined in enums/hapi_imagedataformat_nif.c */
ERL_NIF_TERM hapi_make_hapi_imagedataformat(ErlNifEnv* env, HAPI_ImageDataFormat enum_value);
bool hapi_get_hapi_imagedataformat(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_ImageDataFormat* enum_result);

/* Defined in enums/hapi_license_nif.c */
ERL_NIF_TERM hapi_make_hapi_license(ErlNifEnv* env, HAPI_License enum_value);
bool hapi_get_hapi_license(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_License* enum_result);

/* Defined in enums/hapi_geotype_nif.c */
ERL_NIF_TERM hapi_make_hapi_geotype(ErlNifEnv* env, HAPI_GeoType enum_value);
bool hapi_get_hapi_geotype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_GeoType* enum_result);

/* Defined in enums/hapi_inputtype_nif.c */
ERL_NIF_TERM hapi_make_hapi_inputtype(ErlNifEnv* env, HAPI_InputType enum_value);
bool hapi_get_hapi_inputtype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_InputType* enum_result);

/* Defined in enums/hapi_assettype_nif.c */
ERL_NIF_TERM hapi_make_hapi_assettype(ErlNifEnv* env, HAPI_AssetType enum_value);
bool hapi_get_hapi_assettype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_AssetType* enum_result);

/* Defined in enums/hapi_rstorder_nif.c */
ERL_NIF_TERM hapi_make_hapi_rstorder(ErlNifEnv* env, HAPI_RSTOrder enum_value);
bool hapi_get_hapi_rstorder(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_RSTOrder* enum_result);

/* Defined in enums/hapi_attributeowner_nif.c */
ERL_NIF_TERM hapi_make_hapi_attributeowner(ErlNifEnv* env, HAPI_AttributeOwner enum_value);
bool hapi_get_hapi_attributeowner(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_AttributeOwner* enum_result);

/* Defined in enums/hapi_shadertype_nif.c */
ERL_NIF_TERM hapi_make_hapi_shadertype(ErlNifEnv* env, HAPI_ShaderType enum_value);
bool hapi_get_hapi_shadertype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_ShaderType* enum_result);

/* Defined in enums/hapi_imagepacking_nif.c */
ERL_NIF_TERM hapi_make_hapi_imagepacking(ErlNifEnv* env, HAPI_ImagePacking enum_value);
bool hapi_get_hapi_imagepacking(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_ImagePacking* enum_result);

/* Defined in enums/hapi_result_nif.c */
ERL_NIF_TERM hapi_make_hapi_result(ErlNifEnv* env, HAPI_Result enum_value);
bool hapi_get_hapi_result(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_Result* enum_result);

/* Defined in enums/hapi_curvetype_nif.c */
ERL_NIF_TERM hapi_make_hapi_curvetype(ErlNifEnv* env, HAPI_CurveType enum_value);
bool hapi_get_hapi_curvetype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_CurveType* enum_result);

/* Defined in enums/hapi_statusverbosity_nif.c */
ERL_NIF_TERM hapi_make_hapi_statusverbosity(ErlNifEnv* env, HAPI_StatusVerbosity enum_value);
bool hapi_get_hapi_statusverbosity(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_StatusVerbosity* enum_result);

/* Defined in enums/hapi_permissions_nif.c */
ERL_NIF_TERM hapi_make_hapi_permissions(ErlNifEnv* env, HAPI_Permissions enum_value);
bool hapi_get_hapi_permissions(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_Permissions* enum_result);

/* Defined in enums/hapi_envinttype_nif.c */
ERL_NIF_TERM hapi_make_hapi_envinttype(ErlNifEnv* env, HAPI_EnvIntType enum_value);
bool hapi_get_hapi_envinttype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_EnvIntType* enum_result);

/* Defined in enums/hapi_assetsubtype_nif.c */
ERL_NIF_TERM hapi_make_hapi_assetsubtype(ErlNifEnv* env, HAPI_AssetSubType enum_value);
bool hapi_get_hapi_assetsubtype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_AssetSubType* enum_result);

/* Defined in enums/hapi_grouptype_nif.c */
ERL_NIF_TERM hapi_make_hapi_grouptype(ErlNifEnv* env, HAPI_GroupType enum_value);
bool hapi_get_hapi_grouptype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_GroupType* enum_result);

/* Defined in enums/hapi_transformcomponent_nif.c */
ERL_NIF_TERM hapi_make_hapi_transformcomponent(ErlNifEnv* env, HAPI_TransformComponent enum_value);
bool hapi_get_hapi_transformcomponent(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_TransformComponent* enum_result);

/* Defined in enums/hapi_statustype_nif.c */
ERL_NIF_TERM hapi_make_hapi_statustype(ErlNifEnv* env, HAPI_StatusType enum_value);
bool hapi_get_hapi_statustype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_StatusType* enum_result);

/* Defined in enums/hapi_state_nif.c */
ERL_NIF_TERM hapi_make_hapi_state(ErlNifEnv* env, HAPI_State enum_value);
bool hapi_get_hapi_state(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_State* enum_result);

/* Defined in enums/hapi_curveorders_nif.c */
ERL_NIF_TERM hapi_make_hapi_curveorders(ErlNifEnv* env, HAPI_CurveOrders enum_value);
bool hapi_get_hapi_curveorders(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_CurveOrders* enum_result);

/* Defined in enums/hapi_presettype_nif.c */
ERL_NIF_TERM hapi_make_hapi_presettype(ErlNifEnv* env, HAPI_PresetType enum_value);
bool hapi_get_hapi_presettype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_PresetType* enum_result);

/* Defined in enums/hapi_parmtype_nif.c */
ERL_NIF_TERM hapi_make_hapi_parmtype(ErlNifEnv* env, HAPI_ParmType enum_value);
bool hapi_get_hapi_parmtype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_ParmType* enum_result);

/* Defined in enums/hapi_storagetype_nif.c */
ERL_NIF_TERM hapi_make_hapi_storagetype(ErlNifEnv* env, HAPI_StorageType enum_value);
bool hapi_get_hapi_storagetype(ErlNifEnv* env, const ERL_NIF_TERM term, HAPI_StorageType* enum_result);


#endif //!defined(HAPI_ENUMS_NIF_H)
