/// @author Mykola Konyk <mykola@konyk.org>
///
/// @copyright 2015
/// @license MS-RL
/// This file is autogenerated from util/hapi_enum_nif.c.template
/// This file corresponds to %{HAPI_STRUCT}% struct from HAPI_Common.h

#include "../hapi_private_nif.h"
#include "../hapi_records_nif.h"


ERL_NIF_TERM
hapi_make_%{HAPI_STRUCT_DOWNCASE}%(ErlNifEnv* env, const %{HAPI_STRUCT}%* hapi_struct)
{
    return enif_make_tuple(env, %{HAPI_STRUCT_SIZE}%,
        hapi_make_atom(env, "%{HAPI_STRUCT_DOWNCASE}%"),
        %{HAPI_STRUCT_TO_ERL_MAP});
}


bool
hapi_get_%{HAPI_STRUCT_DOWNCASE}%(ErlNifEnv* env, const ERL_NIF_TERM term, %{HAPI_STRUCT}%* hapi_struct)
{
    int32_t tuple_size = 0;
    const ERL_NIF_TERM* tuple_handle_info = NULL;
    bool handle_info_record = false;

    %{HAPI_STRUCT_TO_C_VARS}%

    if(!enif_get_tuple(env, term, &tuple_size, &tuple_handle_info) ||
        (tuple_size != %{HAPI_STRUCT_SIZE}%) ||
        !hapi_check_atom(env, *tuple_handle_info, "%{HAPI_STRUCT_DOWNCASE}%", &handle_info_record) ||
        !handle_info_record ||
//%{HAPI_STRUCT_TO_C_MAP}%
        false)
    {
        return false;
    }

    return true;
}
